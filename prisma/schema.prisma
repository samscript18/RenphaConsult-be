// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ARTIST
  ADMIN
}

model User {
  id             Int       @id @default(autoincrement())
  name           String    
  email          String    @unique
  password       String
  profilePicture String?
  playlists      Playlist[]
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String
  bio       String?
  albums    Album[]
  tracks    Track[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id         Int       @id @default(autoincrement())
  title      String
  duration   Int       // Duration in seconds
  artist     Artist    @relation(fields: [artistId], references: [id])
  artistId   Int
  album      Album?    @relation(fields: [albumId], references: [id])
  albumId    Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  PlaylistTracks PlaylistTracks[]

  Playlist Playlist[] @relation("PlaylistTracks")
}

model Album {
  id         Int       @id @default(autoincrement())
  title      String
  artist     Artist    @relation(fields: [artistId], references: [id])
  artistId   Int
  releaseDate DateTime
  coverImage String?
  tracks     Track[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Playlist {
  id        Int       @id @default(autoincrement())
  name      String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  tracks    Track[]   @relation("PlaylistTracks")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  PlaylistTracks PlaylistTracks[]
}

model PlaylistTracks {
  playlist   Playlist  @relation(fields: [playlistId], references: [id])
  playlistId Int
  track      Track     @relation(fields: [trackId], references: [id])
  trackId    Int

  @@id([playlistId, trackId])
}



